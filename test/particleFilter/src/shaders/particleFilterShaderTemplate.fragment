#version 120

varying vec2 texCoord;
uniform sampler2D lastSimulation;

// --- Variables related to algorithm
const highp float PI = 3.14159265359;

const float WORLD_SIZE = 100;
const vec2 LAND_MARKS[4] = vec2[4](	vec2(20.0, 20.0),
									vec2(80.0, 80.0),
									vec2(20.0, 80.0),
									vec2(80.0, 20.0));

struct robotNoise{
	float forward;
	float turn;
	float sense;
};

robotNoise noise = robotNoise(0.05, 0.05, 5.0);

const float sigmaOri = 0.05;
const float sigmaForward = 0.1;

uniform int nuParticles;
uniform vec3 gSeed;
uniform int gState;
uniform vec2 movement;
uniform float maxWeigh;
uniform vec4 measurementReal;

// Declarations
// Particle filter process
void initParticles();
void simulateAndWeigh();
void resample();


// Noise functions
vec3 mod289(vec3 _x);
vec2 mod289(vec2 _x);
vec3 permute(vec3 _x);
float snoise(vec2 _v);
float gauss(float _m, float _sigma);
float gaussian(float _nu, float _sigma, float _x);

//------------------------------------------------
// ---------------- main -------------------------
//------------------------------------------------
void main() {
	if(gState == 0)
		initParticles();
	else if(gState == 1)
		simulateAndWeigh();
	else if(gState == 2)
		resample();
}


//------------------------------------------------
// ---------- Particle Filter pipeline -----------
//------------------------------------------------
void initParticles(){
	// This functions initialize data on framebuffer
	gl_FragColor = vec4(snoise(gl_FragCoord.xy*gSeed.x), snoise(gl_FragCoord.xy*gSeed.y), snoise(gl_FragCoord.xy*gSeed.z), 1.0);
}

void simulateAndWeigh(){
	// This method simulate a step in the particle.
	// 666 Generalize simulation. Now is for robot's case

	vec4 robotData = texture2D(lastSimulation, texCoord);
	
	vec2 robotPos = robotData.rg*WORLD_SIZE;
	float robotOri = robotData.b*2*PI;
	
	// Calc orientation.
	robotOri = robotOri + movement.y + gauss(0.0, noise.turn);
	robotOri = mod(robotOri, 2*PI);
	
	// Calc position
	float dist = movement.x + gauss(0.0, noise.forward);
	
	robotPos.x += cos(robotOri)*dist;
	robotPos.y += sin(robotOri)*dist;
	
	robotPos = mod(robotPos, WORLD_SIZE);

	// sense
	vec4 z;
	for (int i = 0; i < 4; i++) {
		float dist = sqrt(pow(robotPos.x - LAND_MARKS[i].x, 2) + pow(robotPos.y - LAND_MARKS[i].y, 2));
		dist += gauss(0.0, noise.sense);
		z[i] = dist;
	}


	// calculus of weigh
	float prob = 1.0;
	for (int i = 0; i < 4; i++) {
		float dist = sqrt(pow(robotPos.x - LAND_MARKS[i].x, 2) + pow(robotPos.y - LAND_MARKS[i].y, 2));
		prob *= gaussian(dist, noise.sense, measurementReal[i]);
	}

	// Store into texture
	gl_FragColor = vec4(robotPos/WORLD_SIZE, robotOri/2/PI, prob);

}

void resample(){
	float beta = 0.0;
	int index = int(nuParticles*snoise(gl_FragCoord.xy*gSeed.y));

	vec4 robotData = texture2D(lastSimulation, texCoord);

	beta += snoise(gl_FragCoord.xy*gSeed.x) * 2.0 * maxWeigh;
	while (beta > robotData.a) {
		beta -= robotData.a;
		index = int(mod(index + 1, nuParticles));
		int row = index / 40;
		int col = int(mod(index, 40));
		robotData = texture2D(lastSimulation, vec2(row, col));
	}
	


	gl_FragColor = robotData;
}


//------------------------------------------------
// ---------------- Noise ------------------------
//------------------------------------------------
vec3 mod289(vec3 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
	return mod289(((x*34.0)+1.0)*x);
}


float snoise(vec2 v) {
	const vec4 C = vec4(	0.211324865405187,  // (3.0-sqrt(3.0))/6.0
							0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
							-0.577350269189626,  // -1.0 + 2.0 * C.x
							0.024390243902439); // 1.0 / 41.0
	// First corner
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);

	// Other corners
	vec2 i1;
	//i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
	//i1.y = 1.0 - i1.x;
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	// x0 = x0 - 0.0 + 0.0 * C.xx ;
	// x1 = x0 - i1 + 1.0 * C.xx ;
	// x2 = x0 - 1.0 + 2.0 * C.xx ;
	vec4 x12 = x0.xyxy + C.xxzz;
	x12.xy -= i1;

	// Permutations
	i = mod289(i); // Avoid truncation effects in permutation
	vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
	+ i.x + vec3(0.0, i1.x, 1.0 ));

	vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
	m = m*m ;
	m = m*m ;

	// Gradients: 41 points uniformly over a line, mapped onto a diamond.
	// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;

	// Normalise gradients implicitly by scaling m
	// Approximation of: m *= inversesqrt( a0*a0 + h*h );
	m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

	// Compute final noise value at P
	vec3 g;
	g.x  = a0.x  * x0.x  + h.x  * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0 * dot(m, g);
}

float gauss(float _m, float _sigma){	// Aproximation of "squared" gauss
	return _m + snoise(gl_FragCoord.xy)*_sigma*2 - _sigma;
}

float gaussian(float _nu, float _sigma, float _x){
	return exp(-(pow(_nu - _x, 2)) / (pow(_sigma,2)) / 2.0) / sqrt(2.0 * 3.1416 * (pow(_sigma, 2)));
	
}